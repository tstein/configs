#!/usr/bin/env python3

import argparse
import datetime
import os
import shutil
import sys

PHOTOS_HOME = os.path.expanduser("~/photos")

def mkdir(dir_path):
    try:
        os.makedirs(dir_path)
    except FileExistsError:
        pass

def parse_args():
    parser = argparse.ArgumentParser(description="Process some photos.")
    parser.add_argument("RAWS", type=str,
            help="directory containing the raw photos and XMP sidecars")
    parser.add_argument("ALBUM", type=str,
            help="name of the album to put the processed and raw photos in")
    return parser.parse_args()

def main():
    args = parse_args()

    raws_dir = args.RAWS
    rawdir_files = sorted(os.listdir(raws_dir))
    raws = [f for f in rawdir_files if f.endswith(".NEF")]
    jpgs = [f for f in rawdir_files if f.endswith(".JPG")]
    xmps = [f for f in rawdir_files if f.endswith(".xmp")]

    all_xmps_present = True
    for f in raws + jpgs:
        if not f + ".xmp" in xmps:
            all_xmps_present = False
            print("error: {} doesn't have a sidecar".format(f))
    if not all_xmps_present:
        sys.exit(1)

    # this'll usually work, except for Bahrain trips
    year = str(datetime.datetime.now().year)
    album_dir = os.path.join(PHOTOS_HOME, year, args.ALBUM)

    cli_runs = []
    for raw in raws:
        raw_path = os.path.join(raws_dir, raw)
        xmp_path = raw_path + ".xmp"
        processed_path = os.path.join(album_dir, raw.replace(".NEF", ".jpg"))

        with open(xmp_path) as f:
            if 'xmp:Rating="5"' in f.read():
                cli_runs.append((raw_path, xmp_path, processed_path))
    for jpg in jpgs:
        jpg_path = os.path.join(raws_dir, jpg)
        xmp_path = jpg_path + ".xmp"
        processed_path = os.path.join(album_dir, jpg.replace(".JPG", ".jpg"))

        with open(xmp_path) as f:
            if 'xmp:Rating="5"' in f.read():
                cli_runs.append((jpg_path, xmp_path, processed_path))

    mkdir(album_dir)
    for run in cli_runs:
        print("processing {}".format(run[0]))
        cmd = "darktable-cli \"{}\" \"{}\" \"{}\" --core -t 16".format(*run)
        print("  running {}".format(cmd))
        os.system(cmd)

        if not run[0].endswith(".JPG"):
            print("  copying {} to {}".format(run[0], album_dir))
            shutil.copy(run[0], album_dir)
        shutil.copy(run[1], album_dir)
        print("  copying {} to {}".format(run[1], album_dir))


if __name__ == "__main__":
    main()
